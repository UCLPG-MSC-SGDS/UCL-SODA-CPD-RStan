[["index.html", "Introduction to Bayesian Inference and Modelling (June 2025) Welcome Timetable, Schedule &amp; Location My Contact Details", " Introduction to Bayesian Inference and Modelling (June 2025) Welcome UCL Social Data Institute (SODA) is hosting a five-day course on Bayesian inference. The aim is to introduce academics and professional data analysts to the basics of Bayesian inference using RStudio and Stan. The course atmosphere will be extremely friendly and supportive, with the goal of teaching the fundamentals of Bayesian inference in Stan to participants from diverse backgrounds—including industry and research fields such as population health, social sciences, disaster-risk reduction, and many more. By the end of the workshop, the you should be able to: Acquire the foundation and advanced knowledge on key principles of statistical modelling within a Bayesian framework; Be able to perform inferential statistics on spatial and non-spatial data to carry out hypothesis testing for evidence-based research using the diverse types of regression-based models from a Bayesian framework; Be able to perform spatial risk prediction for areal data as well as quantify levels of uncertainty using exceedance probabilities; Acquire new programming language skills such as Stan (interfaced with RStudio). Timetable, Schedule &amp; Location The course will cover the following topics: Date Downloadables Topics Not Applicable Installation of R, RStudio &amp; Stan 09/06/2025 Slides; [Dataset] Introduction to Probability Distributions 10/06/2025 Slides; N/A Introduction to Bayesian Inference 11/06/2025 Slides; [Dataset] Bayesian Generalised Linear Models 12/06/2025 Slides; [Dataset] Bayesian Hierarchical Regression Models 13/06/2025 Slides; [Dataset] Spatial Bayesian Risk Modelling Solutions: [Day 1] | [Day 2] | [Day 3] | [Day 4] | [Day 5] Throughout the course, each day will consist of a lecture, a walkthrough demonstration and computer seminar session. Here is the information on the programme’s schedule: Times Format 10:30am-12:00pm (1h30mins) Lecture 12:00pm-01:00pm (1h) Lunch Break 01:00pm-02:00pm (1h) Live Demonstration Walk-through 02:00pm-02:15pm (0h15mins) Short Break 02:15pm-04:15pm (2h) Computer Practical Session 04:15pm-04:30pm (0h15mins) Wrap-up 04:30pm Close All sessions are delivered in-person at the location: Room G04 Seminar Room 2 Charles Bell House (University College London), 43–45 Foley Street, London, W1W 7TY View UCL Map | View Google Map IMPORTANT NOTE: Please bring your own laptops with you to benefit from the course specifically for the walkthrough and computer practicals. My Contact Details Anwar Musah Lecturer in Social &amp; Geographic Data Science UCL Department of Geography Room 115 (First Floor) North West Wing Building, Gower Street, London, WC1E 6BT Email: a.musah@ucl.ac.uk; Telephone: +44 (0)748 279 0776 LinkedIn | UCL Profile "],["reading-list.html", "Reading List Day 1: Introduction to Probability Distributions Day 2: Introduction to Bayesian Inference Day 3: Bayesian Generalised Linear Models (GLMs) Day 4: Bayesian Hierarchical Regression Models Day 5: Bayesian Spatial Modelling for Areal Data in Stan", " Reading List Contact me via email a.musah@ucl.ac.uk if you are having problems securing one of these recommended books. Check these downloadable ‘Easter Eggs’ in this Google Drive Repository [LINK]. Day 1: Introduction to Probability Distributions Book: [Theory] Slater, M. (2022). Bayesian Methods in Statistics: From Concepts to Practice. Chapters 2: Probability Distributions. Pages 24-45. Book: [Theory] Donovan, T.M., &amp; Mickey, R.M. (2019). Bayesian Statistics for Beginners: A Step-by-Step Approach. Chapters 1: Introduction to Probability. Pages 3-29. Book: [Theory] Donovan, T.M., &amp; Mickey, R.M. (2019). Bayesian Statistics for Beginners: A Step-by-Step Approach. Chapters 3: Probability Functions. Pages 87-132. Article: [Stan Programming] Carpenter, B., Gelman, A., et al (2019). Stan: A Probabilistic Programming Language. J Stat Soft. DOI: 10.18637/jss.v076.i01. Day 2: Introduction to Bayesian Inference Book: [Theory] Donovan, T.M., &amp; Mickey, R.M. (2019). Bayesian Statistics for Beginners: A Step-by-Step Approach. Chapters 2: Bayes’ Theorem and Bayesian Inference. Pages 3-29. Day 3: Bayesian Generalised Linear Models (GLMs) Book: [Theory] Slater, M. (2022). Bayesian Methods in Statistics: From Concepts to Practice. Chapters 5: General Models. Pages 114-151. Article: [Theory] Baldwin, S.A., &amp; Larson, M.J. (2017). An introduction to using Bayesian linear regression with clinical data. Behavior Research and Therapy. 98:58-75. DOI: 10.1016/j.brat.2016.12.016. Book: [Theory] Gelman, A et al. (2014). Bayesian Data Analysis (3rd Edition). Chapters 14: Introduction to Regression Models. Pages 353-378. Book: [Stan Programming] Lambert, B. (2018). A Student’s Guide to Bayesian Statistics. Chapters 18: Linear Regression Models. Pages 453-466. Day 4: Bayesian Hierarchical Regression Models Article: [Stan Programming] Sorensen, T., &amp; Vasishth, S. (2016). Bayesian linear mixed models using Stan: A tutorial for psychologists, linguists, and cognitive scientists. Tutorials in Quantitative Methods for Psychology. 12(3):175-200. DOI: 10.20982/tqmp.12.3.p175 Book: [Theory] Gelman, A et al. (2014). Bayesian Data Analysis (3rd Edition).Chapters 15: Hierarchical Linear Models. Pages 381-402. Day 5: Bayesian Spatial Modelling for Areal Data in Stan Article: [Application] Li, L. et al (2022). An ecological study exploring the geospatial associations between socioeconomic deprivation and fire-related dwelling casualties in the England (2010–2019). Applied Geography. 144(1027718). DOI: 10.1016/j.apgeog.2022.102718. Article: [Application] Gomez, M.J. et al (2023). Bayesian spatial modeling of childhood overweight and obesity prevalence in Costa Rica. BMC Public Health. 23(651). DOI:10.1186/s12889-023-15486-1 Article: [Theory] Morris, M. et al (2019). Bayesian hierarchical spatial models: Implementing the Besag York Mollié model in stan. Spatial and Spatio-temporal Epidemiology. 31(100301). DOI: 10.1016/j.sste.2019.100301 Online Tutorials: [Stan Programming] Morris, M. et al (2019). Spatial Models in Stan: Intrinsic Auto-Regressive Models for Areal Data. URL: https://mc-stan.org/users/documentation/case-studies/icar_stan.html Article: [History] Besag, J. (1974). Spatial interaction and the statistical analysis of lattice systems. Journal of the Royal Statistical Society. Series B (Methodological) (1974): 192-236. Article: [History] Besag, J. &amp; Kooperberg, K. (1995) “On conditional and intrinsic autoregression. Biometrika. 733-746. Article: [History] Riebler, A., et al (2016). An intuitive Bayesian spatial model for disease mapping that accounts for scaling. Statistical methods in medical research. 25(4): 1145-1165. DOI: 10.1177/0962280216660421 "],["installation-of-r-rstudio-stan.html", "1 Installation of R, RStudio &amp; Stan 1.1 What is Stan? 1.2 Installation of R &amp; RStudio 1.3 Installation of rstan (or Stan) &amp; other important r-packages", " 1 Installation of R, RStudio &amp; Stan 1.1 What is Stan? Stan is an interface for several statistical software packages (e.g., RStudio, Python, Julia, Stata, and MATLAB) which allows the user to perform state-of-the-art statistical modelling within a Bayesian framework. For R users, the package is called rstan which interfaces Stan and RStudio. The focus will be solely on Stan and RStudio. We will show you how one can develop and compile Stan scripts for Bayesian inference through RStudio to perform basic parameter estimation, as well as a wide range of regression-based techniques starting with the simplest univariable linear models and its different families (logistic and Poisson) to the more advanced multivariable spatial risk models. Before all that, let us install the appropriate software and their latest version (as of June 3rd 2025). The next section will guide you through the installation process. 1.2 Installation of R &amp; RStudio This section takes you through the installation process for R (Base) and RStudio on MAC and Windows. If you are a MAC user, please jump to section 1.2.1 If you are a Windows user, please jump to section 1.2.2 1.2.1 Installation process for MAC users You will need to have the following software installed for the rstan package to work on MAC. It is recommended to have the latest version of R and RStudio R (version 4.5.0) and RStudio (version 2025.05.0+496) XQuartz (version 2.8.5) XCode (version 16.4) GNU Fortran (version 12.2) [1] Installation of R (4.4.2) and RStudio (2024.12.0-427) on MAC: For R (Base), please ensure you have installed the correct version for your MAC (Mac Intel) or MAC (Apple silicon M1, M2 or M3) OS. OS User type R (Base) RStudio Desktop MAC (Intel) R-4.5.0-x86_64.pkg RStudio-2025.05.0-496.dmg MAC (M1, M2 or M3) R-4.5.0-arm64.pkg RStudio-2025.05.0-496.dmg Download the correct version of R (Base) for your system. Double-click on the downloaded file (i.e., R-4.5.0-x86_64.pkg or R-4.5.0-arm64.pkg) and follow the steps to complete the installation. Now, we can download the file (i.e., .dmg) for RStudio from the link provided in the above table. Double-click the downloaded file (i.e., RStudio-2025.05.0-496.dmg) and then drag and drop the RStudio icon into the Applications folder to complete the installation. [2] Installation of XQuartz (2.8.5): Some functions in R (Base) and Stan require some of the libraries from XQuartz in order to function smoothly on your MAC OS. Download the latest version of XQuartz (XQuartz-2.8.5.pkg) by clicking on this LINK and simply complete the installation process by following the steps on your system. [3] Installation of XCode (16.4): Some functions in R (Base) and Stan require some of the external developer tools from the XCode application to function properly on your MAC OS. Go to the App Store application and get the XCode app downloaded on to your system by clicking this LINK. Once it has downloaded, you can click on the “OPEN” button to verify it’s been downloaded. A window will prompt you to complete the installation. [4] GNU Fortran (version 12.2): R (Base) and some packages require the GNU Fortran 12.2 compiler in order to function smoothly on your MAC OS. Download the latest version of GNU Fortran 12.2 (gfortran-12.2-universal.pkg) by clicking on this LINK and simply complete the installation process by following the steps on your system. IMPORTANT NOTE: The above four steps should complete the installation process for R and RStudio on MAC. 1.2.2 Installation process for Windows users You will need to have the following software installed for the rstan package to work on Windows. R (version 4.5.0) RTools45 (version 4.5.0) RStudio (version 2025.05.0+496) [1] Installation of R (4.3.2) and RStudio (2023.06.0-421) on Windows: OS User type R (Base) RStudio Desktop Windows R-4.5.0-win.exe RStudio-2025.05.0-496.exe Download the file for R-4.5.0-win.exe attached in the table above. Double-click the downloaded file (i.e., R-4.5.0-win.exe) and follow the steps to complete the installation on your system. Now, we can download the file (i.e., .exe) for RStudio from the link provided in the above table. Double-click the downloaded file (i.e., RStudio-2025.05.0-496.exe) and follow the steps from the installer to complete the installation. [2] Installation of Rtools 4.5.0 For Windows users, after you have completed the installation for R (Base) and RStudio, you are required to install the RTools45 package as it contains some libraries and developer tools for R function properly. Download the latest version of RTools45 by clicking on this LINK to initiate the download of the Rtools45 installer. Double-click the downloaded rtools45-6536-6492.exe file and follow the steps to complete the installation. IMPORTANT NOTE: The above two steps should complete the installation process for R and RStudio on Windows. 1.3 Installation of rstan (or Stan) &amp; other important r-packages When opening the RStudio application on your Windows or MAC PC. You will be greeted with its interface. The window is usual split into three panels: 1.) R Console, 2.) Environments and 3.) Files, Help, Outputs etc., The above section is the Menu Bar. You can access other functions for saving, editing, and opening a new R and Stan script files for writing and compiling codes. Let us opening a new R script by clicking on the File &gt; New File &gt; R Script. This should open a new script file titled “Untitled 1”. Now we are going to latest version of rstan 2.36.0.9000 (as of June 3rd 2025). Using the install.packages() function, we can finally install this package. You can use the code chunk below: install.packages(&quot;rstan&quot;, repos = c(&#39;https://stan-dev.r-universe.dev&#39;, getOption(&quot;repos&quot;))) After installation, use the following code chunk to test if its work: example(stan_model, package = &quot;rstan&quot;, run.dontrun = TRUE) You will first see some gibberish running through your console - don’t be alarmed - it means that its working. You will know rstan has been successfully installed, and working, when you see some iterations for four chains displayed in console. You will also see the objects fit, fit2, mod and stancode stored in the Environments panel when its done. This completes the installation process for rstan. Finally, we install other relevant R-packages needed for these sessions. It includes the following: sf: “Simply Features” package that allows the user to load shapefiles into RStudio’s memory. tmap: this package gives access to various functions for users to generate maps. stars: this package for handling SpatioTemporal Arrays, Raster and vector data. SpatialEpi: grants access to the expected() function needed for calculating expected numbers. geostan: grants access to further functions that we need to compute the adjacency matrix that can be handled in Stan. We will use the two functions shape2mat() and prep_icar_data() to create the adjacency matrix as nodes and edges. tidybayes: grants access to further functions for managing posterior estimates. We will need it calculating the exceedance probabilities. Note that is loaded alongside tidyverse and dplyr packages. bayesplot: grants access to further functions for plot posterior estimates from Bayesian models. loo: this package allows the user to perform model validation and comparison tidyverse: grants access to ‘streamlined’ codes and functions for simplified data management in R beyond those provided with Base R codes. dplyr: grants further access to more ‘streamlined’ codes and functions for simplified data management in R beyond those provided with Base R codes. install.packages(&quot;sf&quot;) install.packages(&quot;tmap&quot;) install.packages(&quot;Stars&quot;) install.packages(&quot;SpatialEpi&quot;) install.packages(&quot;geostan&quot;) install.packages(&quot;tidybayes&quot;) install.packages(&quot;bayesplot&quot;) install.packages(&quot;loo&quot;) install.packages(&quot;tidyverse&quot;) install.packages(&quot;dplyr&quot;) This concludes the installation section and sets you computer up for the course, if you encounter any problems please contact me. "],["introduction-to-stan-programming.html", "2 Introduction to Stan Programming 2.1 Introduction 2.2 About Stan Programming 2.3 Tasks", " 2 Introduction to Stan Programming 2.1 Introduction 2.1.1 Lecture video (TBC) [Embed recorded lecture video here] [Watch on YouTube] 2.1.2 Learning outcomes Today’s session aims to introduce you to the basic Stan programming etiquette for Bayesian analysis in RStudio using Stan as an Interface, and producing output and interpreting it’s results. By the end of this session, you should be able to perform the following: Getting acquainted with Stan and learning the basic programming etiquette of Stan - this will include simulating and estimation of parameters. Know how to write and compile various probability distributions for simple parameters (i.e., mean, standard deviation, a proportion etc.,) in Stan. Know how to compile the results into RStudio for use, interpretation and visualisation. After the demonstration session is delivered in the first 1-hour of the practical - you can use the computer practical session to try the tutorials yourself by following the instructions as well as trying out the tasks. 2.1.3 Demonstration video (TBC) [Embed recorded demonstration video here] [Watch on YouTube] 2.1.4 Setting up the work directory Since, this is our first practical lesson for Day 1, let us create a new folder CPD-course at the desktop location of our computer. Now, create a sub folder called “Day 1” within the CPD-course folder. Here, we will store all our R and Stan scripts. Set the work directory to the Day 1 folder. Download the dataset for today and move them into the Day 1 folder: Bti_Larvicide_dataset.csv For Windows, the code for setting the work directory will be: setwd(&quot;C:/Users/AccountName/Desktop/CPD-course/Day 1&quot;) For MAC, the code for setting the work directory will be: setwd(&quot;/Users/AccountName/Desktop/CPD-course/Day 1&quot;) 2.1.5 Loading packages To start writing scripts for Bayesian analysis, we will need to load the rstan package. # Load the packages with library() library(&#39;rstan&#39;) Note that when you load rstan from cran, you will see some recommendations on using multiple cores for speeding the process. For the best experience, we highly recommend using this code: options(mc.cores = parallel::detectCores()) rstan_options(auto_write = TRUE) This tells RStudio to use multiple core for parallel processing whenever Stan is being implemented. Every time you want to use Stan - make sure to load parallel::detectCores() and rstan_options code. 2.2 About Stan Programming This section describes how to code up a basic Stan model. This section forms the foundation for later, and more complex models. 2.2.1 Basic building blocks I: Opening a Stan Script in RStudio Alright, let’s open a Stan file. You can do this by clicking and selecting File &gt; New File &gt; Stan File When you open a new Stan file, you will be greeted with an untitled script which contains the following bits of code: // // This Stan program defines a simple model, with a // vector of values &#39;y&#39; modeled as normally distributed // with mean &#39;mu&#39; and standard deviation &#39;sigma&#39;. // // Learn more about model development with Stan at: // // http://mc-stan.org/users/interfaces/rstan.html // https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started // // The input data is a vector &#39;y&#39; of length &#39;N&#39;. data { int&lt;lower=0&gt; N; vector[N] y; } // The parameters accepted by the model. Our model // accepts two parameters &#39;mu&#39; and &#39;sigma&#39;. parameters { real mu; real&lt;lower=0&gt; sigma; } // The model to be estimated. We model the output // &#39;y&#39; to be normally distributed with mean &#39;mu&#39; // and standard deviation &#39;sigma&#39;. model { y ~ normal(mu, sigma); } Do not worry about that - it is just some formalities put there by default by the developers behind rstan. You can delete everything you see in this script as we will build our own basic script from scratch. Once you have deleted the default information save the empty file in the Day 1 folder naming it Predicting_larvicide_concentrations.stan. Whenever you are saving Stan programme in RStudio always make sure to save it with a .stan ending. 2.2.2 Basic building blocks II: Structure of a Stan script A typical Stan script consist of the following 6 blocks: Data Transformed data Parameters Transformed parameters Model Generated quantities Out of these 6 blocks, the Data, Parameters and Model block must be specified in your Stan script. These are three compulsory blocks needed in any Stan script in order for a Bayesian model to work within the rstan environment. Let us define what these three important blocks are. FIRST: The data block allows the user to declare how the model reads the dataset from RStudio by specifying the sample size N or observations; the number of k parameters that needs to be estimated; the names or list of independent variables for the corresponding parameters (e.g., coefficients); the dependent variable (or outcome); as well as any constraints that needs to be applied to the dataset. A data block is specified accordingly in the script as: data { } It is within these curly brackets will specify these details of our dataset. They must be precise as it will have to correspond with the dataset that’s currently loaded in RStudio’s memory. SECOND: The parameters block allows the user to declare all the unknown quantities we are going to estimate. The parameters that go here are the ones we want to infer or predict. It define includes the name(s) of the parameters that correspond things like the mean, variance, sd, coefficients or anything that you are going to estimate. A parameters block is specified after the data block: data { } parameters { } THIRD: The model block allows the user to declare and specify the sampling statistical statements for the dependent variable (i.e., likelihood function) as well as any priors for the parameters we will estimate through the model. This block is where we code our probability distributions. A model block is specified after the parameters block: data { } parameters { } model { } Note that adding a double forward slashes // lets the user add a comment to the script. Let us add some comments into each of the blocks: // Add comments after double forward slashes data { // data block } parameters { // parameters block } model { // model block } Important Notes: Since, the other blocks are not compulsory - we will leave them out for now. But we will come back and explain what those remaining blocks are in Day 2 and 3. Now, save your Stan script. 2.2.3 Basic building blocks III: Data types and constraint declarations In Stan, all parameters and data must be defined as variables with a specific type. Note, this is quite a pain but going through this step allows rstan to perform really fast. There are four basic data types: int: for integers, used for specifying the sample size, and is applied to discrete variables real: for continuous, is applied to continuous variables (i.e., ratio or interval) array: for a containing several elements of data points that are real or int values vector: for a containing several elements of data points that are real or int values. It is similar to array syntax, but if you are going to perform algebraic manipulation of several elements with matrices - then it is best to use them as a vector. matrix: for containing a collection of several column vectors as a single n-by-m object. For constraints, we specify them on variables. For example, if we are dealing with a proportion p we will code it as real&lt;lower=0, upper=1&gt; p to tell Stan that p can be any value from 0 to 1, inclusive. Note that specifying constraints really helps speed Stan up so use them wherever you can. Lastly, you can create array of variables. For example, array[10] real&lt;lower=0 upper=1&gt; p tells Stan that p is an array of 10 real values for proportions. We can also create a matrix to represent a set of independent variables and so on. Please take you time with learning these codes, and experiment with them more to gain proficiency. Now that we have discussed these points - let us work with an actual demonstration to show data types and constraints work. 2.2.4 Basic building blocks IV: Developing our model PROBLEM: To combat mosquito populations - water bodies are treated with biological an agent called Bti dunks. These are ringed shaped objects that dissolve in standing water where mosquitoes breed. 120 samples from various points to ensure its working against mosquitoes and its not a cause for concern in terms of environmental contamination. What is the mean &amp; standard deviation, and uncertainty surrounding the levels of Bti larvicide concentrations present in standing water? If you open the following dataset Bti_Larvicide_dataset.csv: # open dataset Bti_data &lt;- read.csv(&quot;Bti_Larvicide_dataset.csv&quot;) # open data viewer View(Bti_data) You will notice that it contains 120 observations, and 2 columns: The first column standing_water_id is the unique ID number for each observation The second column Bti_mgl is the concentrations of Bti larvicides in various water bodies (in mg/L) Let us build our first model that predicts the mean and standard deviation as a posterior distribution. Let us extract the bits and pieces of information for the data block: Total sample size is 120. We will define that as N in the Stan as an integer int with non-zero values in the data block The column in the data frame for Bti_data (i.e., Bti_mgl) needs to be extracted. We will define that as an array of size N containing real values. We will name the variable as bti in Stan within the data block Now that we have the information, in RStudio, we will need to build this dataset into a list object using list() to connect it with the data block in the Stan script. Let us store the data in list object called stan_dataset: # create a list object using the list() function stan_dataset &lt;- list(N = 120, bti = Bti_data$Bti_mgl) # print data in console stan_dataset Now that the list object is prepared, we can start scripting in Stan. FIRST: We specify the total number of samples as N that its an integer int which cannot be negative a number &lt;lower = 0&gt; in the data block. Also, we also need to specify name of the bti variable in stan that its an array of size N consisting real numbers in the data block too. data { // define N (120) int&lt;lower = 0&gt; N; // create an array of size 120 to store BTI values array[N] real bti; } SECOND: For the parameters block, here we will need to specify the name of the parameters that we want to infer. Here, its \\(\\mu\\) which is the mean levels of Bti concentrations, as well as \\(\\sigma\\) which is the standard deviation. Note that, we need to tell Stan that these parameters are real numbers, as well as they are strictly positive values (i.e., use &lt;lower = 0&gt; to apply constraint) because we cannot have negative concentrations &amp; a negative value for standard deviation. data { // define N (120) int&lt;lower = 0&gt; N; // create an array of size 120 to store BTI values array[N] real bti; } parameters { // defined the mean as mu real&lt;lower = 0&gt; mu; // defined the SD as sigma real&lt;lower = 0&gt; sigma; } THIRD: For the model block, we need to state that both \\(\\mu\\) and \\(\\sigma\\) in the likelihood function - hence, bti variable will be sampled from the normal distribution. The model block will be: data { // define N (120) int&lt;lower = 0&gt; N; // create an array of size 120 to store BTI values array[N] real bti; } parameters { // defined the mean as mu real&lt;lower = 0&gt; mu; // defined the SD as sigma real&lt;lower = 0&gt; sigma; } model { // likelihood function, without any prior distribution specified bti ~ normal(mu, sigma); } COMPLIMENTS: Well done, we have built our first Bayesian model in Stan. Let us now save this script. What we need to do next is compile this script in RStudio to get our results. 2.2.5 Basic building blocks V: Compiling Stan code in RStudio You can use the stan() function to call the stan script from RStudio in order to obtain the posterior estimates. The results will be stored in stan object called bti_prediction: # the directory needs to be set to where you save the dataset and Stan script bti_prediction &lt;- stan(&quot;Predicting_larvicide_concentrations.stan&quot;, data=stan_dataset, iter=3000, chains=3, verbose = FALSE) Some notes on the above code’s arguments: data= specify the dataset stored as a list object. iter= we are asking the stan() to perform 3,000 iterations on each chain to generate the posterior samples. The algorithm behind these iterations can be MCMC, NUTS or HMC algorithm (NUTS No-U-turn sampler is the default) chains= we are asking the stan() function to perform 3 chains using 3 cores in our computer The resulting output can be printed with the function print(). Here, we are going to print the mean, standard error in mean, SD and the IQR ranges with 95% limits (i.e., 2.5% and 97.5%): print(bti_prediction, probs=c(0.025, 0.25, 0.5, 0.75, 0.975)) We obtain this summary table: Inference for Stan model: anon_model. 3 chains, each with iter=3000; warmup=1500; thin=1; post-warmup draws per chain=1500, total post-warmup draws=4500. mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat mu 25.27 0.01 0.45 24.39 24.96 25.26 25.57 26.18 3624 1 sigma 5.01 0.01 0.34 4.40 4.77 4.99 5.22 5.72 3811 1 lp__ -247.60 0.02 1.03 -250.35 -247.97 -247.28 -246.87 -246.61 2164 1 Samples were drawn using NUTS(diag_e) at Mon Jun 9 01:10:46 2025. For each parameter, n_eff is a crude measure of effective sample size, and Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1). What does it all mean? The top part states that 3 chains were run for 3000 iterations. However, the first 1500 samples generated from each chain were discarded as warm-up, meaning that only 1500 samples from each chain were kept, resulting 4500 (1500x3) total post-warm-up sample draws. The output shows the summary statistics for our \\(\\mu\\) and \\(\\sigma\\). The lp__ is the log-probability - which is used to quantify how well the model is for the data but, in my opinion, its not a useful estimate. Instead, use the effective sample size n_eff and Rhat. If the Rhat is less than 1.05 for all parameters - it means that the estimation of our parameters are fine. Anything above 1.05 it means that the results are not reliable. 2.2.6 Basic building blocks VI: Extract posterior samples &amp; interpretation At this point, let us extract the posterior samples for the mean and standard deviation, and graph them to understand it posterior distribution. We use the extract() function from the rstan package, and graph them: # extracting the samples (it should be 4500) extracted_samples &lt;- rstan::extract(bti_prediction) The object extracted_samples should contain the 4,500 sample results each for the Bti (mg/L) mean and its corresponding SD. From the extraction, suppose if you wanted to compute the posterior mean, with the 0.025 and 0.975 quantiles (these limits are referred to as 95% credibility limits (95% CrI)). This can be done using both the mean() and quantile() function. Here is how we compute them: # posterior mean for mu mean(extracted_samples$mu) # calculate 95% Credibility limits (95% CrI) for mu quantile(extracted_samples$mu, probs = c(0.025, 0.975)) We can also examine the posterior samples as a distribution as a visual through a density plot: # generate probability density plot of the posterior samples plot(density(extracted_samples$mu), main = &quot;Posterior samples&quot;, xlab = &quot;Posterior Means for Bti concentrations (mg/L)&quot;, ylab = &quot;Posterior Probability Density (Plausibility)&quot;) # Add vertical dashed line at the mean abline(v = 25.24285, lty = &quot;dashed&quot;, col = &quot;darkgrey&quot;, lwd = 2) # add vertical line for the lower 95% CrI value abline(v = 24.34943, lty = &quot;dashed&quot;, col = &quot;darkgrey&quot;, lwd = 2) # add vertical line for the upper 95% CrI value abline(v = 26.12595, lty = &quot;dashed&quot;, col = &quot;darkgrey&quot;, lwd = 2) We can also report the results for the standard deviation as well (i.e., its posterior mean, 95% CrI and posterior distribution): # posterior mean for sigma mean(extracted_samples$sigma) # calculate 95% Credibility limits (95% CrI) for sigma quantile(extracted_samples$sigma, probs = c(0.025, 0.975)) # generate probability density plot of the posterior samples for sigma plot(density(extracted_samples$sigma), main = &quot;Posterior samples&quot;, xlab = &quot;Posterior Means for Standard Deviation&quot;, ylab = &quot;Posterior Probability Density (Plausibility)&quot;) # Add vertical dashed line at the mean abline(v = 4.998751, lty = &quot;dashed&quot;, col = &quot;darkgrey&quot;, lwd = 2) # add vertical line for the lower 95% CrI value abline(v = 4.411431, lty = &quot;dashed&quot;, col = &quot;darkgrey&quot;, lwd = 2) # add vertical line for the upper 95% CrI value abline(v = 5.666914, lty = &quot;dashed&quot;, col = &quot;darkgrey&quot;, lwd = 2) Interpretation: The estimated mean (\\(\\mu\\)) of Bti concentrations from our sample posterior distribution was 25.24 mg/L (i.e., most likely or plausible value) with 95% credibility limits of 24.39 and 26.12. Formally writing as \\(\\mu\\) = 25.24 mg/L (95% CrI: 24.39-26.12). In terms of the spread, the estimated standard deviation (\\(\\sigma\\)) is 4.99 mg/L (95% CrI: 4.411 to 5.666) 2.3 Tasks 2.3.1 Task 1 - Simulating and Estimating Body Mass Index (BMI) Try this first problem in Stan: You are tasked to simulate a sample of 1000 BMI values from a Normal distribution with mean 23 and SD 8.3. Then, using Stan, fit a Bayesian model to estimate the unknown population mean BMI and its 95% credible interval. Assume both the population mean (\\(\\mu\\)) and standard deviation (\\(\\sigma\\)) are unknown. Hints: In the R script, use the function rnorm() to generate your sample of 1000 BMI points In the R script, create a list() with N and bmi (your simulated data) In the Stan script for the following: Define the data block in accordance with the list object. Use a parameters block to define mu and sigma as real values (constrain sigma to be positive). Use a model block to write the likelihood: bmi ~ normal(mu, sigma); Report the posterior mean of BMI and its 95% credible interval from the model output. Generate its posterior density plot. 2.3.2 Task 2 - Low-level arsenic poisoning in Cornwall, UK Try this second problem in Stan: Suppose a random sample of 50 villagers from a rural community in Cornwall, UK, were surveyed for signs of chronic arsenic exposure. Each person was classified as either Diseased or Healthy. Out of the 50 surveyed, 19 were found to be diseased. Use a Bayesian model to estimate the true prevalence of arsenic poisoning in the wider population. Hints: In the R script, create a list() with N and Diseased. In the Stan script for the following: Define the data block in accordance with the list object. Use a parameters block to define prevalence as a parameter (constrain prevalence between 0 and 1). Use a model block to write the likelihood: Diseased ~ binomial(N, prevalence); Report the posterior mean of the prevalence of metallic poisoning in Cornwall with its 95% credible interval from the model output. Generate its posterior density plot. Note: Solutions for task 1 and 2 will be made available later today "],["introduction-to-bayesian-inference.html", "3 Introduction to Bayesian Inference 3.1 Introduction 3.2 Input: Data, Process Model and Assumptions for Priors 3.3 Compiling Stan code in RStudio 3.4 Tasks", " 3 Introduction to Bayesian Inference 3.1 Introduction 3.1.1 Lecture video (TBC) [Embed recorded lecture video here] [Watch on YouTube] 3.1.2 Learning outcomes Today’s session aims to introduce you to the basic Stan programming etiquette for Bayesian analysis in RStudio using Stan as an Interface, and producing output and interpreting it’s results. By the end of this session, you should be able to perform the following: Getting acquainted with Stan and learning the basic programming etiquette of Stan - this will include simulating and estimation of parameters. Writing you process model and prior distribution for the parameters. Know how to compile the results into RStudio for use, interpretation and visualisation. After the demonstration session is delivered in the first 1-hour of the practical - you can use the computer practical session to try the tutorials yourself by following the instructions as well as trying out the tasks. 3.1.3 Demonstration video (TBC) [Embed recorded demonstration video here] [Watch on YouTube] 3.1.4 Setting up the work directory Go the existing folder CPD-course and create a sub folder called “Day 2” within the CPD-course folder. Here, we will store all our R and Stan scripts. Set the work directory to the Day 2 folder. For Windows, the code for setting the work directory will be: setwd(&quot;C:/Users/AccountName/Desktop/CPD-course/Day 2&quot;) For MAC, the code for setting the work directory will be: setwd(&quot;/Users/AccountName/Desktop/CPD-course/Day 2&quot;) 3.1.5 Loading packages We will need to load the rstan package and perform the set-up for Stan by setting the number of cores accordingly. # Load the packages with library() library(&#39;rstan&#39;) # set up options(mc.cores = parallel::detectCores()) rstan_options(auto_write = TRUE) Remember, this tells RStudio to use multiple core for parallel processing whenever Stan is being implemented. Every time you want to use Stan - make sure to load parallel::detectCores() and rstan_options code. 3.2 Input: Data, Process Model and Assumptions for Priors This section describes how to code up a basic Stan model from scratch. Here, we will use an example of a mechanistic model for predicting incident disease outcome. This section forms the foundation for later, and more complex models. PROBLEM: Bayesian estimation of Epidemic Growth for Aedes-borne Infections -During the early days of heavy rainfall - there is a huge influx of mosquito populations in Recife which causes an outbreak Dengue virus. Public health officials collected daily case counts over the course of 15 days during this period where rainfalls are pronounced. The process model for predicting dengue is: \\(D(t) = D_0 \\exp(rt)\\) What is the initial value of dengue cases \\(D_0\\) as an incidence? Note that \\(D(t)\\) is the observed number of cases at time (\\(t\\)) What is the estimated epidemic growth rate \\(r\\)? Enter the following dataset: # Simulated data day &lt;- 0:14 observed_cases &lt;- c(12, 9, 19, 30, 27, 45, 67, 71, 103, 119, 161, 213, 288, 340, 431) Let us extract the bits and pieces of information for the data block: Total sample size is 15 which corresponds to the number of time points starting from 0 to 14. We will define that as N in the Stan as an integer int with non-zero values in the data block We are going to read each day point separately from 0 to 14. We will define that as t in the Stan as an array of size N to hold the collection of values. These are non-zero values in the data block The array for observed_cases needs to be extracted. We will define that as an array of size N containing int values. We will name the variable as y in Stan within the data block Now that we have the information, in RStudio, we will need to build this dataset into a list object using list() to connect it with the data block in the Stan script. Let us store the data in list object called stan_dataset: # create a list object using the list() function # Data list for Stan stan_dataset &lt;- list(N = length(day), t = as.vector(day), y = as.integer(observed_cases) ) # print data in console stan_dataset Now that the list object is prepared, we can start scripting in Stan. FIRST: We specify the total number of samples as N that its an integer int which cannot be negative a number &lt;lower = 0&gt; in the data block. Also, we also need to specify name of the t and y variables in stan that its an array of size N consisting of positive int numbers in the data block too. data { int&lt;lower = 0&gt; N; array[N] int&lt;lower = 0&gt; t; array[N] int&lt;lower = 0&gt; y; } SECOND: For the parameters block, here we will need to specify the name of the parameters that we want to infer. Here, its \\(D_0\\) which is the mean initial (or baseline) cases of Dengue, as well as \\(r\\) which is the mean growth rate for the epidemic. Note that, we need to tell Stan that these parameters real numbers, where the former is strictly positive values (i.e., use &lt;lower = 0&gt; to apply constraint), and \\(r\\) can be either negative or positive. data { int&lt;lower = 0&gt; N; array[N] int&lt;lower = 0&gt; t; array[N] int&lt;lower = 0&gt; y; } parameters { real&lt;lower = 0&gt; D0; real r; } THIRD: For the model block, we need to create mechanistic model for the \\(D(t)\\). Howeever, we are going to state some priors as follows: Prior assumptions: \\(D_0\\) could be anything, but it is mostly likely 10, and probably between 1 to 20, anything higher is less likely. This corresponds to a gamma distribution i.e., \\(D_0\\) ~ gamma(2, 0.1), which is a weakly informative prior \\(r\\) could be anything, it is hard to say – therefore I will be cautious and assume that it is negligible (0); however, the growth rate could be an increasing, or a decreasing value, and so I will assume a SD of 1. This corresponds to a normal distribution i.e., \\(r\\) ~ normal(0, 1), hence, its Non-informative prior Likelihood function for process model - The best suited likelihood function for the process model is a Poisson. Why? Because the observed data i.e., observed_cases is discrete and not continuous. Here is what the Stan code will look like: data { int&lt;lower = 0&gt; N; array[N] int&lt;lower = 0&gt; t; array[N] int&lt;lower = 0&gt; y; } parameters { real&lt;lower = 0&gt; D0; real r; } model { // priors D0 ~ gamma(2, 0.1); r ~ normal(0, 1); for (n in 1:N) { real lambda = D0 * exp(r * t[n]); y[n] ~ poisson(lambda); } } Lastly, we will add one more block called the generated quantities block to make predictions about the incidence by generating simulated data that resembles the original. data { int&lt;lower = 0&gt; N; array[N] int&lt;lower = 0&gt; t; array[N] int&lt;lower = 0&gt; y; } parameters { real&lt;lower = 0&gt; D0; real r; } model { D0 ~ gamma(2, 0.1); r ~ normal(0, 1); for (n in 1:N) { real lambda = D0 * exp(r * t[n]); y[n] ~ poisson(lambda); } } generated quantities { vector[N] y_pred; for (n in 1:N) { y_pred[n] = poisson_rng(D0 * exp(r * t[n])); } } COMPLIMENTS: Well done, we have built our second Bayesian model in Stan. Let us now save this script. What we need to do next is compile this script in RStudio to get our results. 3.3 Compiling Stan code in RStudio You can use the stan() function to call the stan script from RStudio in order to obtain the posterior estimates. The results will be stored in stan object called bti_prediction: fit &lt;- stan( file = &quot;Incidence_rates.stan&quot;, data = stan_dataset, iter = 3000, chains = 3, verbose = FALSE ) Recall that the above code’s arguments are as follows: data= specify the dataset stored as a list object. iter= we are asking the stan() to perform 3,000 iterations on each chain to generate the posterior samples. The algorithm behind these iterations can be MCMC, NUTS or HMC algorithm (NUTS No-U-turn sampler is the default) chains= we are asking the stan() function to perform 3 chains using 3 cores in our computer The resulting output can be printed with the function print(). Here, we are going to print the mean, standard error in mean, SD and the IQR ranges with 95% limits (i.e., 2.5% and 97.5%): print(fit, pars = c(&quot;D0&quot;, &quot;r&quot;), probs = c(0.025, 0.5, 0.975)) We obtain this summary table: Inference for Stan model: anon_model. 3 chains, each with iter=3000; warmup=1500; thin=1; post-warmup draws per chain=1500, total post-warmup draws=4500. mean se_mean sd 2.5% 50% 97.5% n_eff Rhat D0 12.31 0.04 1.06 10.31 12.26 14.51 771 1 r 0.26 0.00 0.01 0.24 0.26 0.27 784 1 Samples were drawn using NUTS(diag_e) at Tue Jun 10 08:37:14 2025. For each parameter, n_eff is a crude measure of effective sample size, and Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1). What does it all mean? The top part states that 3 chains were run for 3000 iterations. However, the first 1500 samples generated from each chain were discarded as warm-up, meaning that only 1500 samples from each chain were kept, resulting 4500 (1500x3) total post-warm-up sample draws. The output shows the summary statistics for our \\(\\mu\\) and \\(\\sigma\\). The lp__ is the log-probability - which is used to quantify how well the model is for the data but, in my opinion, its not a useful estimate. Instead, use the effective sample size n_eff and Rhat. If the Rhat is less than 1.05 for all parameters - it means that the estimation of our parameters are fine. Anything above 1.05 it means that the results are not reliable. Interpretation: The estimated growth rate for incident Dengue 0.26 (95% CrI: 0.24 to 0.27). The estimated mean value for \\(D_0\\) was 12.31 (95% CrI: 10.31 to 14.51) At this point, let us extract the posterior samples for the mean and standard deviation, and graph them to understand it posterior distribution. We can also see if the predictions are similar to original data. # extracting the samples (it should be 4500) # Extract and plot posterior predictions posterior &lt;- extract(fit) y_pred_mean &lt;- apply(posterior$y_pred, 2, mean) Here is the plot: # plot observed vs predictions plot(day, observed_cases, pch = 16, col = &quot;red&quot;, xlab = &quot;Day&quot;, ylab = &quot;Cases&quot;, main = &quot;Observed vs. Posterior Predicted Cases&quot;) # add cosmetics to plot lines(day, y_pred_mean, col = &quot;blue&quot;, lwd = 2) legend(&quot;topleft&quot;, legend = c(&quot;Observed&quot;, &quot;Predicted Mean&quot;), col = c(&quot;red&quot;, &quot;blue&quot;), pch = c(16, NA), lty = c(NA, 1)) You may be interested in seeing the simulated samples that was drawn from the joint distribution. You can pull this information and store as a data frame: posterior_df &lt;- data.frame( D0 = posterior$D0, r = posterior$r, predictions = posterior$y_pred ) 3.4 Tasks 3.4.1 Task 1 - Aedes-borne infestation in Recife 05/2023 Try this second problem in Stan: Suppose a random sample of 976 households from Recife, Brazil, were surveyed Aedes-borne infestation. From the total, 428 were affected by mosquito infestation. It is common knowledge that prevalence of infestation is rough about 20-25%. Use a Bayesian model to estimate the true prevalence of infestation in Recife. Hints: In the R script, create a list() with N and Infested. In the Stan script for the following: Define the data block in accordance with the list object. Use a parameters block to define prevalence as a parameter (constrain prevalence between 0 and 1). Use a model block to write the likelihood: Infested ~ binomial(N, prevalence); In the model block, use it to specify the appropriate prior distribution for the prevalence parameter. Report the posterior mean of the prevalence of metallic poisoning in Cornwall with its 95% credible interval from the model output. Generate its posterior density plot. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
